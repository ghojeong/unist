       	       	    +---------------------------+
                    |           CS 124          |
                    | PROJECT 5: VIRTUAL MEMORY |
                    |      DESIGN DOCUMENT      |
                    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
Jeong YeonHyeok fktmfpeps@unist.ac.kr
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

Note that this design document is a bit long.  Most of the questions can be
answered pretty briefly.  Don't feel a need to write a long answer if it is
not required by the question.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct list frame_table;
//list to holds frame_elem

sturct semaphore frame_sema;
//semaphore for accessing frame_table list

struct frame_elem {
   char *thread_name;
   uint32_t key;
   uint32_t *page_ptr;
   struct list_elem elem;
   bool mapped;
};
//list element for frame, key is used for holding frame addr, and page_ptr is used for holding page addr
//mapped variable is declared for marking mapped frame or not

struct list page_list;
//list to holds page_list_elem
//page_list is declared for supplementary page table

struct semaphore g_sema;
//semaphore for accessing page_list

struct page_list_elem {
  uint32_t *vpage;
  uint32_t *kpage;
  struct file *file_;
  struct thread *thread_;
  struct list_elem elem;
  bool valid;
  bool mapped;
};
//used for holding information about each page's address and frame, which file is used for that page,
//and thread info, valid info to indicate swapped or not, and also, mapped


struct swap_slot {
  struct bitmap *swap_map;
  struct block *block_loc;
  struct list swap_list;
  uint32_t sector_size;
  int size_count;
};
//swap slot holds for swap_table, this contains bitmap to check the sector in the block is used or not
//and block_loc points to the swapping area, swap_list holds entries for swapped page


struct swap_slot *swap_table;

struct swap_list_elem {
  struct thread *thread_;
  uint32_t *vaddr;
  uint32_t *paddr;
  uint32_t offset;

  struct list_elem elem;
};
//swap list elem holds information for who's page(thread_) is saved at (offset), in the swap block
//which hold page address(vaddr), and where it was saved(paddr)


struct semaphore swap_sema_g;
//semaphore for swap_table


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

We used the given functions, like palloc_get_page(), to get frame, or
pagedir_set_page() which get frame by palloc_get_page() and allocate it to the given pagedir
when the frame allocated to the pagedir, we saved it to the frame_table, so that we can check it later

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

If we give flag PAL_USER, then palloc_get_page function returns the frame from user pool,
that is, used only for user process, so we avoid aliasing issue by this flag

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

Before actually allocate a new frame, we check whether it exist or not, at the frame_table and page_list
which requires semaphore, and by using that semaphore, we can avoid race condition

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

Although the hash map looks more faster than just using a list, i choosed it as it is more convenient to use,
and don't require many functions for use

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

I choosed the FIFO way, (lack of time...ㅜㅜ), when the frames are allocated,
it inserted into the page_list, which means, first allocated frames are located at the front of the list.
and also, as each entry has valid variable, indicating the frame is actually allocated or not, for that page.
by skipping invalid pages and choosing first valid page, we choose the frame to evict

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

The entries in the page_table will not be removed until the process terminates, that means, the page_list_elem
which holds page address and frame address, and also, valid variable, will stay in the page_list.
Thus, When process P obtains a framem from Q, it searches the page_list, and change valid variable to false, and call
pagedir_clear_page() function with Q thread's pagedir, so that next access to that frame from process Q will be fail.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

As user process can access below PHYS_BASE and up to 0x08084000
And if the fault_addr is below of f->esp and above code segment with read, then it should be invalid,
And also, if it is presenting page, but it was read only, and we tried write, we should exit,

else, we have to expand the stack

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

We used lock just for page_list, swap_table, frame_table, and each lock's are used separetely
which means there isn't any process which holds two semaphore at the same time, so we can avoid deadlock

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make synchronization
>> easy, but limit parallelism.  On the other hand, using many locks
>> complicates synchronization and raises the possibility for deadlock
>> but allows for high parallelism.  Explain where your design falls
>> along this continuum and why you chose to design it this way.

At the side of single lock, as we used single lock for the each tables, not for each entry.
but by doing this, we can avoid deadlock situations

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct file_map {
   int map_id;
   int fn;
   uint32_t offset;
   uint32_t file_size;
   struct file *file_;
   uint32_t **page;
   uint32_t **vaddr;
   struct list_elem elem;
   struct semaphore sema_;
};

file_map is used to save the information about the saved file

struct thread {

////////////////////////////
other codes
////////////////////////////
///////////////////////////
#ifdef USERPROG
    struct list file_map_list;
    int map_count;
}

each user process has file_map_list, which holds informations about mapped file and
how many files are currently saved

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

